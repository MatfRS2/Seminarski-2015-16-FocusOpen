//Auto generated code extended to support interfaces to allow for generic pluginmanager
// 
// This source code was auto-generated by xsd, Version=4.0.30319.1.
// 
namespace FocusOPEN.Data.Xml {
    using System.Xml.Serialization;
    using Daydream.Data;
    using FocusOPEN.Shared;
    using System.Xml;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]                                       
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute("Plugin", Namespace = "", IsNullable = false)]
    public partial class Plugin_V1 : IPlugin {
        
        private string nameField;
        
        private decimal pluginVersionField;
        
        private string registrationKeyField;
        
        private bool requireAllResourceFilesField;
        
        private bool requireAllResourceFilesFieldSpecified;
        
        private bool forcePreviewFormatField;
        
        private bool forcePreviewFormatFieldSpecified;
        
        private string[] fileExtensionsField;

        private PluginContext_V1[] contextsField;
        
        private decimal schemaVersionField;
        
        private bool disabledField;
        
        private bool disabledFieldSpecified;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public decimal PluginVersion {
            get {
                return this.pluginVersionField;
            }
            set {
                this.pluginVersionField = value;
            }
        }
        
        /// <remarks/>
        public string RegistrationKey {
            get {
                return this.registrationKeyField;
            }
            set {
                this.registrationKeyField = value;
            }
        }
        
        /// <remarks/>
        public bool RequireAllResourceFiles {
            get {
                return this.requireAllResourceFilesField;
            }
            set {
                this.requireAllResourceFilesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RequireAllResourceFilesSpecified {
            get {
                return this.requireAllResourceFilesFieldSpecified;
            }
            set {
                this.requireAllResourceFilesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool ForcePreviewFormat {
            get {
                return this.forcePreviewFormatField;
            }
            set {
                this.forcePreviewFormatField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ForcePreviewFormatSpecified {
            get {
                return this.forcePreviewFormatFieldSpecified;
            }
            set {
                this.forcePreviewFormatFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("FileExtension", IsNullable=false)]
        public string[] FileExtensions {
            get {
                return this.fileExtensionsField;
            }
            set {
                this.fileExtensionsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("Context", IsNullable = false)]
        public PluginContext_V1[] Contexts
        {
            get
            {
                return this.contextsField;
            }
            set
            {
                this.contextsField = value;
            }
        }


        ///extended property to support IPluginContexts
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public IPluginContext[] ContextItems
        {
            get
            {
                return (IPluginContext[])this.contextsField;
            }
            set
            {
                this.contextsField = (PluginContext_V1[])value;
            }
        }       



        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal SchemaVersion {
            get {
                return this.schemaVersionField;
            }
            set {
                this.schemaVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Disabled {
            get {
                return this.disabledField;
            }
            set {
                this.disabledField = value;
                this.disabledFieldSpecified = true;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DisabledSpecified {
            get {
                return this.disabledFieldSpecified;
            }
            set {
                this.disabledFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class PluginContext_V1 : IPluginContext {
        
        private ContextType[] useForTypeField;
        
        private PluginContextMarkup markupField;
        
        private string[] resourcesField;

        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("UseForType")]
        public ContextType[] UseForType {
            get {
                return this.useForTypeField;
            }
            set {
                this.useForTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Markup", Type = typeof(PluginContextMarkup), IsNullable = true)]
        public PluginContextMarkup Markup {
            get {
                return this.markupField;
            }
            set {
                this.markupField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("Resource", IsNullable=false)]
        public string[] Resources {
            get {
                return this.resourcesField;
            }
            set {
                this.resourcesField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

    }
      
    //modified to support reading and writing of CDATA from the markup
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRoot()]
    public partial class PluginContextMarkup:IXmlSerializable
    {
        
        private string srcField;
        private string valueField;

        public System.Xml.Schema.XmlSchema GetSchema() { return null; }

        public void ReadXml(System.Xml.XmlReader reader)
        {
            src = reader.GetAttribute("src") ?? System.String.Empty;
            bool isEmptyElement = reader.IsEmptyElement;
            if (!isEmptyElement) // (1)
            {
                Value = reader.ReadElementContentAsString();
            }
            else
            {
                Value = System.String.Empty;
            }
        }

        public void WriteXml(System.Xml.XmlWriter writer)
        {
            writer.WriteAttributeString("src", src);
            if (!System.String.IsNullOrEmpty(Value))
            {
                writer.WriteCData(Value);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string src {
            get {
                return this.srcField;
            }
            set {
                this.srcField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

    }
}
